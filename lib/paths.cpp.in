/*
 * Copyright (c) 2013-2014 Nicholas Corgan (n.corgan@gmail.com)
 *
 * Distributed under the MIT License (MIT) (See accompanying file LICENSE.txt
 * or copy at http://opensource.org/licenses/MIT)
 */

#include <cstdlib>
#include <fstream>
#include <stdexcept>
#include <string>

#include <boost/filesystem.hpp>

#include <pkmn/paths.hpp>

#include "SQLiteCpp/SQLiteC++.h"

namespace fs = boost::filesystem;

namespace pkmn
{
    static std::string _getenv(const char* var)
    {
        std::string value;

        #ifdef PKMN_PLATFORM_WIN32
        char* arr;
        size_t len;
        _dupenv_s(&arr, &len, var);
        if(!arr) return std::string("");
        else
        {
            value = std::string(arr);
            free(arr);
            return value;
        }
        #else
        const char* arr = getenv(var);
        return (arr) ? std::string(arr) : std::string("");
        #endif
    }

    //Get location of APPDATA
    std::string get_appdata_path()
    {
        #ifdef PKMN_PLATFORM_WIN32
        const char* env_var = "APPDATA";
        #else
        const char* env_var = "HOME";
        #endif

        std::string value = _getenv(env_var);
        if(value != "" and fs::exists(fs::path(value))) return value;

        //It should never get to this point, this is a last resort
        return get_tmp_dir();
    }

    //Get location of database
    std::string get_database_path()
    {
        std::string database_dir = _getenv("LIBPKMN_DATABASE_DIR");
        if(database_dir == "") database_dir = "@LIBPKMN_DATABASE_DIR@"; //Generated by CMake

        //At this point, we should have a database directory, so throw an error otherwise
        if(database_dir == "") throw std::runtime_error("Could not find database!");

        fs::path database_path = fs::path(database_dir) / "libpkmn.db";
        if(fs::exists(database_path)) return database_path.string();
        else throw std::runtime_error("Could not find database!");
    }

    //Get images directory
    std::string get_images_dir()
    {
        std::string images_dir = _getenv("LIBPKMN_IMAGES_DIR");
        if(images_dir == "") images_dir = "@LIBPKMN_IMAGES_DIR@";

        //At this point, we should have an images directory, so throw an error otherwise
        fs::path images_dir_path(images_dir);
        if(images_dir == "" or not fs::exists(images_dir_path))
            throw std::runtime_error("Could not find images directory!");

        //Now that we have a directory, search for necessary top-level directories
        if(not fs::exists(fs::path(images_dir_path / "generation-1")) or
           not fs::exists(fs::path(images_dir_path / "generation-2")) or
           not fs::exists(fs::path(images_dir_path / "generation-3")) or
           not fs::exists(fs::path(images_dir_path / "generation-4")) or
           not fs::exists(fs::path(images_dir_path / "generation-5")) or
           not fs::exists(fs::path(images_dir_path / "misc")) or
           not fs::exists(fs::path(images_dir_path / "pokemon-icons")))
        {
            throw std::runtime_error("Could not find images directory!");
        }
        else return images_dir;
    }

    //Get path for system's temporary directory
    std::string get_tmp_dir()
    {
        std::string tmp = _getenv("TMP");
        return (tmp != "" and fs::exists(fs::path(tmp))) ? tmp : "/tmp";
    }
} /* namespace pkmn */
